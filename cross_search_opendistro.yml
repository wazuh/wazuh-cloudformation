AWSTemplateFormatVersion: 2010-09-09
Description: Deploy an OpenDistro Cross-Search clustering environment
Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
      HVMCENTOS7: ami-02eac2c0129f6376b
      HVMUBUNTU64: ami-024a64a6685d05041
      HVMREDHAT7: ami-6871a115
      HVMDEBIAN: ami-0357081a1383dc76b
      HVMWINDOWS: ami-0a9ca0496f746e6e0

    us-east-2:
      HVM64: ami-0ebbf2179e615c338
      HVMCENTOS7: ami-0f2b4fc905b0bd1f1
      HVMUBUNTU64: ami-097ebb39620d8d54b
      HVMREDHAT7: ami-03291866
      HVMDEBIAN: ami-09c10a66337c79669
      HVMWINDOWS: ami-0087a83ed4a60d1e9

    us-west-1:
      HVM64: ami-015954d5e5548d13b
      HVMUBUNTU64: ami-040dfc3ebf1bfc4f6
      HVMCENTOS7: ami-074e2d6769f445be5
      HVMREDHAT7: ami-18726478
      HVMDEBIAN: ami-0adbaf2e0ce044437
      HVMWINDOWS: ami-0069635df219ce9e5
    us-west-2:
      HVM64: ami-0cb72367e98845d43
      HVMUBUNTU64: ami-0196ce5c34425a906
      HVMCENTOS7: ami-01ed306a12b7d1c96
      HVMREDHAT7: ami-28e07e50
      HVMDEBIAN: ami-05a3ef6744aa96514
      HVMWINDOWS: ami-04ad37d2932b886c0
    ca-central-1:
      HVM64: ami-08a9b721ecc5b0a53
      HVMUBUNTU64: ami-0380eb76ff3ad603f
      HVMCENTOS7: ami-033e6106180a626d0
      HVMREDHAT7: ami-49f0762d
      HVMDEBIAN: ami-04413a263a7d94982
      HVMWINDOWS: ami-020e569ea1f3a4e1c
    eu-west-1:
      HVM64: ami-030dbca661d402413
      HVMUBUNTU64: ami-0b2a4d260c54e8d3d
      HVMCENTOS7: ami-0ff760d16d9497662
      HVMREDHAT7: ami-7c491f05
      HVMDEBIAN: ami-0968f6a31fc6cffc0
      HVMWINDOWS: ami-03838ccd5cfb84782
    eu-west-2:
      HVM64: ami-0009a33f033d8b7b6
      HVMUBUNTU64: ami-09dd110e91f421069
      HVMCENTOS7: ami-0eab3a90fc693af19
      HVMREDHAT7: ami-7c1bfd1b
      HVMDEBIAN: ami-0faa9c9b5399088fd
      HVMWINDOWS: ami-0ebf422d2a92724ec
    eu-west-3:
      HVM64: ami-0ebb3a801d5fb8b9b
      HVMUBUNTU64: ami-00e557eb4a269bf1c
      HVMCENTOS7: ami-0e1ab783dc9489f34
      HVMREDHAT7: ami-5026902d
      HVMDEBIAN: ami-0cd23820af84edc85
      HVMWINDOWS: ami-022cfeccb4b72d6b8
    ap-northeast-1:
      HVM64: ami-00d101850e971728d
      HVMUBUNTU64: ami-0b5a5c971fc30e5d1
      HVMCENTOS7: ami-045f38c93733dd48d
      HVMREDHAT7: ami-6b0d5f0d
      HVMDEBIAN: ami-09fbcd30452841cb9
      HVMWINDOWS: ami-02192102f14f0a10a
    ap-northeast-2:
      HVM64: ami-08ab3f7e72215fe91
      HVMUBUNTU64: ami-06af4ace0697354bf
      HVMCENTOS7: ami-06cf2a72dadf92410
      HVMREDHAT7: ami-3eee4150
      HVMDEBIAN: ami-08363ccce96df1fff
      HVMWINDOWS: ami-0708a3b845edea89c
    ap-southeast-1:
      HVM64: ami-0b5a47f8865280111
      HVMUBUNTU64: ami-0355471dc9f264631
      HVMCENTOS7: ami-0b4dd9d65556cac22
      HVMREDHAT7: ami-76144b0a
      HVMDEBIAN: ami-0555b1a5444087dd4
      HVMWINDOWS: ami-0afce41e503676765
    ap-southeast-2:
      HVM64: ami-0fb7513bcdc525c3b
      HVMUBUNTU64: ami-0065540df76a93885
      HVMCENTOS7: ami-08bd00d7713a39e7d
      HVMREDHAT7: ami-67589505
      HVMDEBIAN: ami-029c54f988446691a
      HVMWINDOWS: ami-0628ef1f10e34307d
    ap-south-1:
      HVM64: ami-00e782930f1c3dbc7
      HVMUBUNTU64: ami-076b389b9989430c2
      HVMCENTOS7: ami-02e60be79e78fef21
      HVMREDHAT7: ami-5b673c34
      HVMDEBIAN: ami-0dc98cbb0d0e49162
      HVMWINDOWS: ami-0e719217acb64308e
    sa-east-1:
      HVM64: ami-058141e091292ecf0
      HVMUBUNTU64: ami-009e4c831385f8901
      HVMCENTOS7: ami-0b8d86d4bf91850af
      HVMREDHAT7: ami-b0b7e3dc
      HVMDEBIAN: ami-030580e61468e54bd
      HVMWINDOWS: ami-07df12f3c5005cd1f
  SubnetConfig:
    WazuhVpc:
      CIDR: 10.0.0.0/16
    SubnetEnv1:
      CIDR: 10.0.0.0/24
    SubnetEnv2:
      CIDR: 10.0.1.0/24
    SubnetEnvCcs:
      CIDR: 10.0.2.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Environment type"
        Parameters:
          - EnvironmentType
      -
        Label:
          default: "AWS environment"
        Parameters:
          - AvailabilityZone
          - KeyPairName
      - 
        Label:
          default: "Version and instance types"
        Parameters:
          - ElasticWazuhVersion
          - WazuhInstanceType
          - ElasticInstanceType
          - KibanaInstanceType
          - SshUsername
          - SshPassword       
      - 
        Label:
          default: "Wazuh configuration"
        Parameters:
          - WazuhServerPort
          - WazuhRegistrationPort
          - WazuhRegistrationPassword
          - WazuhApiPort
          - WazuhApiAdminUsername
          - WazuhApiAdminPassword
          - WazuhClusterKey
      -
        Label:
          default: "Kibana configuration"
        Parameters:
          - KibanaPort
      -
        Label:
          default: "SSL Certificate"
        Parameters:
          - SSLCertificateARN

Parameters:

  # AWS environment 
  AvailabilityZone:
    Description: Select an availability zone for the VPC
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    Description: Existing EC2 key pair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  SshUsername:
    Default: wazuh
    Description: SSH username
    Type: String
    MinLength: '5'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 5. Maximum length 32.
  SshPassword:
    Description: SSH Password
    NoEcho: 'True'
    Type: String
    MinLength: '8'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 8. Maximum length 64.

  # Version and instance types
  ElasticWazuhVersion:
    AllowedValues:
      - 6.5.0_3.7.0
      - 6.5.1_3.7.1
      - 6.5.2_3.7.1
      - 6.5.3_3.7.2
      - 6.5.4_3.7.2
      - 6.6.2_3.9.0
      - 6.7.0_3.9.0
      - 6.7.1_3.9.0
      - 6.8.0_3.9.1
      - 7.1.0_3.9.1
      - 7.1.1_3.9.2
      - 7.2.0_3.9.3
      - 7.2.0_3.9.4
      - 7.3.0_3.9.4
      - 7.3.0_3.9.5
      - 7.3.2_3.10.0
      - 7.3.2_3.10.2
    ConstraintDescription: Format is ElasticVersion_WazuhVersion
    Default: 7.3.2_3.10.2
    Description: Elastic and Wazuh versions to be installed
    Type: String
  WazuhInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Wazuh instance
    Type: String
  EnvironmentType:
    AllowedValues:
      - production
      - staging
      - devel    
    ConstraintDescription: Must contain valid instance type
    Default: staging
    Description: Select a stage
    Type: String

  ElasticInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m5d.large
      - i3.large
      - i3.xlarge
      - i3.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Elastic instance
    Type: String
  KibanaInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m5.large
      - m5d.large
      - m5.xlarge
      - m5.2xlarge
      - r5.large

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Kibana instance
    Type: String
  
  # Wazuh configuration
  WazuhServerPort:
    Default: '1514'
    Description: Port for agents connection with Wazuh server
    Type: String
  WazuhRegistrationPort:
    Default: '1515'
    Description: Port for agents registration with Wazuh server
    Type: String
  WazuhRegistrationPassword:
    Description: Password for Wazuh agents registration
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiPort:
    Default: '55000'
    Description: Port for Wazuh server API
    Type: String
  WazuhApiAdminUsername:
    Default: admin
    Description: Admin username for Wazuh API
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiAdminPassword:
    Description: Admin password for Wazuh API
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhClusterKey:
    Description: Key used for Wazuh servers cluster
    Default: 'abcdefghijklmnopqrstuvwxyz012345'
    Type: String
    MinLength: '32'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Any alphanumeric string of 32 characters
  # Kibana configuration
  KibanaPort:
    Default: '443'
    Description: Port for Kibana WUI
    Type: String
  SSLCertificateARN:
    Description: 'Used for HTTPS access to WUI. Existent certificate, identified by its Amazon Resource Name (ARN).'
    Type: String

Resources:

  # Wazuh Network Load Balancer
  Env1WazuhLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-Wazuh'
      Scheme: internet-facing
      Subnets: 
        - !Ref SubnetEnv1
      Type: network
      Tags:
        - Key: Name
          Value: nlbwazuh

  # Wazuh registration Target Group for Network Load Balancer
  RegistrationTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-registrationTG'
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref ManagerEnv1
        Port: !Ref WazuhRegistrationPort
      Tags:
        - Key: Name
          Value: registrationTG

  # Wazuh registration Listener for Network Load Balancer
  RegistrationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref RegistrationTG
      LoadBalancerArn: !Ref Env1WazuhLb
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP
  
  # Reporting Target Group for Wazuh master and worker nodes
  ReportingTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-reportingTG'
      Port: !Ref WazuhServerPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref ManagerEnv1
        Port: !Ref WazuhServerPort  
      Tags:
        - Key: Name
          Value: reportingTG

  # Reporting Listener for Network LB.
  ReportingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ReportingTG
      LoadBalancerArn: !Ref Env1WazuhLb
      Port: '1514'
      Protocol: TCP


  # Network resources
  WazuhVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - WazuhVpc
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'

  # IAM role and profile
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-GetCloudformation'
          PolicyDocument:
            Statement:
              - Action:
                  - 'cloudformation:DescribeStack*'
                  - 'cloudformation:DescribeStackResource*'
                  - 'cloudformation:List*'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${AWS::StackName}-DescribeInstances'
          PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
                Effect: Allow
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InstanceRole
  SubnetEnv1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WazuhVpc
        CidrBlock: !FindInMap
          - SubnetConfig
          - SubnetEnv1
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: !Sub '${AWS::StackName}-SubnetEnv1'
  SubnetEnv2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WazuhVpc
        CidrBlock: !FindInMap
          - SubnetConfig
          - SubnetEnv2
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: !Sub '${AWS::StackName}-SubnetEnv2'
  SubnetEnvCcs:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WazuhVpc
        CidrBlock: !FindInMap
          - SubnetConfig
          - SubnetEnvCcs
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: !Sub '${AWS::StackName}-SubnetEnvCcs'
  
  # Internet access and routing
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WazuhVpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WazuhVpc
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetEnv1PublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetEnv1
      RouteTableId: !Ref PublicRouteTable
  SubnetEnv2PublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetEnv2
      RouteTableId: !Ref PublicRouteTable
  SubnetEnvCcsPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetEnvCcs
      RouteTableId: !Ref PublicRouteTable

  # Wazuh Network Load Balancer
  KibanaLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-KibanaLb'
      Scheme: internet-facing
      Subnets: 
        - !Ref SubnetEnvCcs
      Type: network
      Tags:
        - Key: Name
          Value: nlbwazuh

  # Listener for Kibana WUI
  TLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TLSTargetGroup
      LoadBalancerArn: !Ref KibanaLb
      Port: !Ref KibanaPort
      Protocol: TLS
      Certificates:
      - CertificateArn: !Ref SSLCertificateARN

  # TLS Target Group for Network Load Balancer
  TLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TLSTargetGroup'
      Port: !Ref KibanaPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref KibanaInstance
        Port: !Ref KibanaPort
      Tags:
        - Key: Name
          Value: TLSTargetGroup

  # Security groups
  ElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticsearch security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElasticSecurityGroup'
  KibanaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kibana security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KibanaPort
          ToPort: !Ref KibanaPort
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KibanaSecurityGroup'
  WazuhSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Wazuh security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref WazuhServerPort
          ToPort: !Ref WazuhServerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref WazuhRegistrationPort
          ToPort: !Ref WazuhRegistrationPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1516
          ToPort: 1516
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: !Ref WazuhApiPort
          ToPort: !Ref WazuhApiPort
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WazuhSecurityGroup'

  # Wazuh Network Load Balancer
  Env2WazuhLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-nlb2'
      Scheme: internet-facing
      Subnets: 
        - !Ref SubnetEnv2
      Type: network
      Tags:
        - Key: Name
          Value: nlbwazuh

  # Wazuh registration Target Group for Network Load Balancer
  RegistrationTG2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-registrationTG2'
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref ManagerEnv2
        Port: !Ref WazuhRegistrationPort
      Tags:
        - Key: Name
          Value: registrationTG2

  # Wazuh registration Listener for Network Load Balancer
  RegistrationListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref RegistrationTG2
      LoadBalancerArn: !Ref Env2WazuhLb
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP
  
  # Reporting Target Group for Wazuh master and worker nodes
  ReportingTG2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-reportingTG2'
      Port: !Ref WazuhServerPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref ManagerEnv2
        Port: !Ref WazuhServerPort  
      Tags:
        - Key: Name
          Value: reportingTG2

  # Reporting Listener for Network LB.
  ReportingListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ReportingTG2
      LoadBalancerArn: !Ref Env2WazuhLb
      Port: '1514'
      Protocol: TCP


  # Environment 1
  ElasticEnv1:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_opendistro.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/dev-ccs-opendistro/elastic/wazuh_cf_opendistro.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_opendistro.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "ElasticSecurityGroup"
          SubnetId: 
            Ref: "SubnetEnv1"
      Tags:
        - Key: Name
          Value: ElasticEnv1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticEnv1 --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticEnv1 --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ManagerEnv1:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhClusterKey: ${WazuhClusterKey}
                EnvironmentType: ${EnvironmentType}
                ElasticIp: ${ElasticEnv1.PrivateIp}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_master.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/dev-ccs-opendistro/wazuh/cluster/wazuh_cf_master.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_master.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "WazuhSecurityGroup"
          SubnetId: 
            Ref: "SubnetEnv1"
      Tags:
        - Key: Name
          Value: WazuhMaster
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ManagerEnv1 --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ManagerEnv1 --region ${AWS::Region}
    DependsOn: GatewayToInternet

  # Environment 2
  ElasticEnv2:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                NodeName: 2
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_opendistro.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/dev-ccs-opendistro/elastic/wazuh_cf_opendistro.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_opendistro.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "ElasticSecurityGroup"
          SubnetId: 
            Ref: "SubnetEnv2"
      Tags:
        - Key: Name
          Value: ElasticEnv2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticEnv2 --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticEnv2 --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ManagerEnv2:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhClusterKey: ${WazuhClusterKey}
                EnvironmentType: ${EnvironmentType}
                ElasticIp: ${ElasticEnv2.PrivateIp}

              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_master.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/dev-ccs-opendistro/wazuh/cluster/wazuh_cf_master.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_master.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "WazuhSecurityGroup"
          SubnetId: 
            Ref: "SubnetEnv2"
      Tags:
        - Key: Name
          Value: WazuhMaster2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ManagerEnv2 --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ManagerEnv2 --region ${AWS::Region}
    DependsOn: GatewayToInternet

  KibanaInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KibanaInstallationSet:
            - KibanaFiles
            - KibanaInstall
        KibanaFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                EnvironmentType: ${EnvironmentType}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_kibana.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/dev-ccs-opendistro/elastic/wazuh_cf_kibana.sh
              mode: '000700'
              owner: root
              group: root
        KibanaInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_kibana.sh 
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "KibanaSecurityGroup"
          SubnetId: 
            Ref: "SubnetEnvCcs"
      Tags:
        - Key: Name
          Value: KibanaInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KibanaInstance --configsets KibanaInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KibanaInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
