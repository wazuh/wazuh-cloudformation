AWSTemplateFormatVersion: 2010-09-09
Description: Provides production ready environment with a Wazuh cluster of two nodes, Elasticsearch cluster of three nodes with xpack security and SSL enabled.
Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
    us-east-2:
      HVM64: ami-0ebbf2179e615c338
    us-west-1:
      HVM64: ami-015954d5e5548d13b
    us-west-2:
      HVM64: ami-0cb72367e98845d43
    ca-central-1:
      HVM64: ami-08a9b721ecc5b0a53
    eu-west-1:
      HVM64: ami-030dbca661d402413
    eu-west-2:
      HVM64: ami-0009a33f033d8b7b6
    eu-west-3:
      HVM64: ami-0ebb3a801d5fb8b9b
    ap-northeast-1:
      HVM64: ami-00d101850e971728d
    ap-northeast-2:
      HVM64: ami-08ab3f7e72215fe91
    ap-southeast-1:
      HVM64: ami-0b5a47f8865280111
    ap-southeast-2:
      HVM64: ami-0fb7513bcdc525c3b
    ap-south-1:
      HVM64: ami-00e782930f1c3dbc7
    sa-east-1:
      HVM64: ami-058141e091292ecf0
  SubnetConfig:
    WazuhVpc:
      CIDR: 10.0.0.0/16
    SubnetWazuh:
      CIDR: 10.0.0.0/24
    SubnetElasticsearch:
      CIDR: 10.0.2.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Installation method"
        Parameters:
          - InstallType
      -
        Label:
          default: "DNS records details"
        Parameters:
          - EnableDNSRecord
          - HostedZoneName
          - Subdomain
      -
        Label:
          default: "AWS environment"
        Parameters:
          - AvailabilityZone
          - KeyPairName
      -
        Label:
          default: "Version and instance types"
        Parameters:
          - ElasticWazuhVersion
          - WazuhInstanceType
          - ElasticInstanceType
          - KibanaInstanceType
          - SshUsername
          - SshPassword
      -
        Label:
          default: "Wazuh configuration"
        Parameters:
          - WazuhServerPort
          - WazuhRegistrationPort
          - WazuhRegistrationPassword
          - WazuhApiPort
          - WazuhApiAdminUsername
          - WazuhApiAdminPassword
          - WazuhClusterKey
          - Branch
          - ApiBranch
      -
        Label:
          default: "Kibana configuration"
        Parameters:
          - KibanaPort
      -
        Label:
          default: "Security"
        Parameters:
          - SSHAccessCidr
          - SSLCertificateARN

Parameters:

  # DNS records details
  HostedZoneName:
    Description: HostedZoneName
    Type: String
  Subdomain:
    Description: Subdomain name
    Type: String
  EnableDNSRecord:
    Default: disabled
    Description: If enabled deploy DNS records for each node and the common LB.
    ConstraintDescription: Only enabled or disabled.
    AllowedValues:
      - enabled
      - disabled
    Type: String

  # AWS environment
  AvailabilityZone:
    Description: Select an availability zone for the VPC
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    Description: Existing EC2 key pair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  SshUsername:
    Default: wazuh
    Description: SSH username
    Type: String
    MinLength: '5'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 5. Maximum length 32.
  SshPassword:
    Description: SSH Password
    NoEcho: 'True'
    Type: String
    MinLength: '8'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 8. Maximum length 64.

  # Version and instance types
  ElasticWazuhVersion:
    AllowedValues:
      - 6.5.0_3.7.0
      - 6.5.1_3.7.1
      - 6.5.2_3.7.1
      - 6.5.3_3.7.2
      - 6.5.4_3.7.2
      - 6.6.2_3.9.0
      - 6.7.0_3.9.0
      - 6.7.1_3.9.0
      - 6.8.0_3.9.1
      - 7.1.0_3.9.1
      - 7.1.1_3.9.2
      - 7.2.0_3.9.3
      - 7.2.0_3.9.4
      - 7.3.0_3.9.4
      - 7.3.0_3.9.5
      - 7.3.2_3.10.0
      - 7.3.2_3.10.2
      - 7.3.2_3.11.0
      - 7.4.2_3.11.0
      - 7.5.0_3.11.0
      - 7.5.1_3.11.0
      - 7.5.1_3.11.1
      - 7.5.1_3.11.2
      - 7.5.2_3.11.3
      - 7.6.1_3.11.4
      - 7.6.1_3.12.0
      - 7.6.2_3.12.2
      - 7.6.2_3.12.3
      - 7.7.1_3.13.0
      - 7.8.0_3.13.1
      - 7.9.1_3.13.2
      - 7.9.2_3.13.2
      - 7.9.2_4.0.0
      - 7.10.2_4.1.5
      - 7.11.2_4.1.5

    ConstraintDescription: Format is ElasticVersion_WazuhVersion
    Default: 7.11.2_4.1.5
    Description: Elastic and Wazuh versions to be installed
    Type: String
  WazuhInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: m5.xlarge
    Description: Type of EC2 instance for Wazuh instance
    Type: String
  InstallType:
    AllowedValues:
      - packages
      - sources
    ConstraintDescription: Must contain valid install type
    Default: packages
    Description: Select between packages or sources install
    Type: String
  ElasticInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m5d.large
      - i3.large
      - i3.xlarge
      - i3.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: i3.large
    Description: Type of EC2 instance for Elastic instance
    Type: String
  KibanaInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - t3.large
      - m5.large
      - m5d.large
      - m5.xlarge
      - m5.2xlarge
      - r5.large

    ConstraintDescription: Must contain valid instance type
    Default: t3.large
    Description: Type of EC2 instance for Kibana instance
    Type: String

  # Wazuh configuration
  WazuhServerPort:
    Default: '1514'
    Description: Port for agents connection with Wazuh server
    Type: String
  WazuhRegistrationPort:
    Default: '1515'
    Description: Port for agents registration with Wazuh server
    Type: String
  WazuhRegistrationPassword:
    Description: Password for Wazuh agents registration
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiPort:
    Default: '55000'
    Description: Port for Wazuh server API
    Type: String
  WazuhApiAdminUsername:
    Default: admin
    Description: Admin username for Wazuh API
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiAdminPassword:
    Description: Admin password for Wazuh API
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhClusterKey:
    Description: Key used for Wazuh servers cluster
    Default: 'abcdefghijklmnopqrstuvwxyz012345'
    Type: String
    MinLength: '32'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Any alphanumeric string of 32 characters
  Branch:
    Description: Wazuh Branch to fetch in order to compile.
    Default: '3.13'
    Type: String
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: Any wazuh branch.
  ApiBranch:
    Description: Wazuh API Branch to fetch in order to compile.
    Default: '3.13'
    Type: String
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: Any wazuh API branch.
  # Kibana configuration
  KibanaPort:
    Default: '443'
    Description: Port for Kibana WUI
    Type: String

  # Security
  SSHAccessCidr:
    Description: A CIDR from which SSH access to the instances is allowed
    AllowedPattern: ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
    Type: String
  SSLCertificateARN:
    Description: 'Used for HTTPS access to WUI. Existent certificate, identified by its Amazon Resource Name (ARN).'
    Type: String

Conditions:
  HasSslCert: !Not [!Equals [!Ref SSLCertificateARN, ""]]
  EnableDNSRecords: !Not [!Equals [!Ref EnableDNSRecord, "disabled"]]

Resources:

  # Network resources
  WazuhVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - WazuhVpc
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
  SubnetWazuh:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WazuhVpc
      AvailabilityZone: !Select [ "0", !Ref AvailabilityZone ]
      CidrBlock: !FindInMap
        - SubnetConfig
        - SubnetWazuh
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetWazuh'
  SubnetElasticsearch:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WazuhVpc
        AvailabilityZone: !Select [ "0", !Ref AvailabilityZone ]
        CidrBlock: !FindInMap
          - SubnetConfig
          - SubnetElasticsearch
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: !Sub '${AWS::StackName}-SubnetElasticsearch'

  # Internet access and routing
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WazuhVpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WazuhVpc
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetWazuhPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWazuh
      RouteTableId: !Ref PublicRouteTable
  SubnetElasticPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      RouteTableId: !Ref PublicRouteTable

  # Security groups
  ElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticsearch security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAccessCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElasticSecurityGroup'
  KibanaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kibana security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAccessCidr
        - IpProtocol: tcp
          FromPort: !Ref KibanaPort
          ToPort: !Ref KibanaPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KibanaSecurityGroup'
  WazuhSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Wazuh security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAccessCidr
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref WazuhServerPort
          ToPort: !Ref WazuhServerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref WazuhRegistrationPort
          ToPort: !Ref WazuhRegistrationPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1516
          ToPort: 1516
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: !Ref WazuhApiPort
          ToPort: !Ref WazuhApiPort
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WazuhSecurityGroup'

  # Elasticsearch load balancer
  ElbElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Elasticsearch security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbElasticSecurityGroup'

  # Wazuh registration Listener for Network Load Balancer
  ElasticBootstrap:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                MasterIp: ${WazuhMasterInstance.PrivateIp}
                WorkerIp: ${WazuhWorkerInstance.PrivateIp}
                KibanaIp: ${KibanaInstance.PrivateIp}
                NodeName: 3
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_bootstrap_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/elastic/wazuh_cf_bootstrap_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_bootstrap_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.124"
      Tags:
        - Key: Name
          Value: ElasticBootstrap
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticBootstrap --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticBootstrap --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticBootstrapEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticBootstrapEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticBootstrapEIP-${AWS::StackName}'
  ElasticBootstrapEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticBootstrapEth0
      AllocationId: !GetAtt
        - ElasticBootstrapEIP
        - AllocationId

  ElasticMasterB:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                NodeName: 1
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/elastic/wazuh_cf_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.123"
      Tags:
        - Key: Name
          Value: ElasticMasterB
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticMasterB --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticMasterB --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticMasterBEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticMasterBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticMasterBEIP-${AWS::StackName}'
  ElasticMasterBEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticMasterBEth0
      AllocationId: !GetAtt
        - ElasticMasterBEIP
        - AllocationId

  ElasticMasterC:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                NodeName: 2
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/elastic/wazuh_cf_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.125"
      Tags:
        - Key: Name
          Value: ElasticMasterC
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticMasterC --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticMasterC --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticMasterCEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticMasterCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticMasterCEIP-${AWS::StackName}'
  ElasticMasterCEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticMasterCEth0
      AllocationId: !GetAtt
        - ElasticMasterCEIP
        - AllocationId

  # Wazuh Network Load Balancer
  WazuhNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-Wazuh'
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetWazuh
      Type: network
      Tags:
        - Key: Name
          Value: nlbwazuh
    # Wazuh Network Load Balancer route53 record
  LbRecord:
    Type: AWS::Route53::RecordSet
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', [!Ref 'Subdomain', ., !Ref 'HostedZoneName']]
      Comment: DNS name for the Wazuh load balancer
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'WazuhNetworkLoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'WazuhNetworkLoadBalancer.DNSName'
    # Deployed nodes route53 records
  ElasticBootstrapRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['ElasticBootstrap', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  ElasticBootstrap.PublicIp
  ElasticMasterBRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['ElasticMasterB', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  ElasticMasterB.PublicIp
  ElasticMasterCRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['ElasticMasterC', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  ElasticMasterC.PublicIp
  KibanaInstanceRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['KibanaInstance', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  KibanaInstance.PublicIp
  WazuhMasterInstanceRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['WazuhMasterInstance', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  WazuhMasterInstance.PublicIp
  WazuhWorkerInstanceRecord:
    Type: 'AWS::Route53::RecordSet'
    Condition: EnableDNSRecords
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Join ['', ['WazuhWorkerInstance', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '600'
      ResourceRecords:
        - !GetAtt  WazuhWorkerInstance.PublicIp

  # Wazuh registration Target Group for Network Load Balancer
  RegistrationTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-registrationTG'
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref WazuhMasterInstance
        Port: !Ref WazuhRegistrationPort
      Tags:
        - Key: Name
          Value: registrationTG

  # TLS Target Group for Network Load Balancer
  TLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: HasSslCert
    Properties:
      Name: !Sub '${AWS::StackName}-TLSTargetGroup'
      Port: !Ref KibanaPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref KibanaInstance
        Port: !Ref KibanaPort
      Tags:
        - Key: Name
          Value: TLSTargetGroup

  # Wazuh registration Listener for Network Load Balancer
  RegistrationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref RegistrationTG
      LoadBalancerArn: !Ref WazuhNetworkLoadBalancer
      Port: !Ref WazuhRegistrationPort
      Protocol: TCP

  # Reporting Target Group for Wazuh master and worker nodes
  ReportingTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-reportingTG'
      Port: !Ref WazuhServerPort
      Protocol: TCP
      VpcId: !Ref WazuhVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref WazuhMasterInstance
        Port: !Ref WazuhServerPort
      - Id: !Ref WazuhWorkerInstance
        Port: !Ref WazuhServerPort
      Tags:
        - Key: Name
          Value: reportingTG

  # Reporting Listener for Network LB.
  ReportingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ReportingTG
      LoadBalancerArn: !Ref WazuhNetworkLoadBalancer
      Port: '1514'
      Protocol: TCP

  # Listener for Kibana WUI
  TLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSslCert
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TLSTargetGroup
      LoadBalancerArn: !Ref WazuhNetworkLoadBalancer
      Port: !Ref KibanaPort
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
      - CertificateArn: !Ref SSLCertificateARN

  # IAM role and profile
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-GetCloudformation'
          PolicyDocument:
            Statement:
              - Action:
                  - 'cloudformation:DescribeStack*'
                  - 'cloudformation:DescribeStackResource*'
                  - 'cloudformation:List*'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${AWS::StackName}-DescribeInstances'
          PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
                Effect: Allow
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InstanceRole

  # Kibana instance
  KibanaInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KibanaInstallationSet:
            - KibanaFiles
            - KibanaInstall
        KibanaFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                KibanaPort: ${KibanaPort}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                InstallType: ${InstallType}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_kibana.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/elastic/wazuh_cf_kibana.sh
              mode: '000700'
              owner: root
              group: root
        KibanaInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_kibana.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "KibanaSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
      Tags:
        - Key: Name
          Value: WazuhKibana
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KibanaInstance --configsets KibanaInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KibanaInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  KibanaEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'KibanaSecurityGroup']
  KibanaEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'KibanaEIP-${AWS::StackName}'
  KibanaEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref KibanaEth0
      AllocationId: !GetAtt
        - KibanaEIP
        - AllocationId

  # Wazuh master instance
  WazuhMasterInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhClusterKey: ${WazuhClusterKey}
                InstallType: ${InstallType}
                Branch: ${Branch}
                ApiBranch: ${ApiBranch}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_master.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/wazuh/cluster/wazuh_cf_master.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_master.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "WazuhSecurityGroup"
          SubnetId:
            Ref: "SubnetWazuh"
      Tags:
        - Key: Name
          Value: WazuhMaster
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WazuhMasterInstance --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WazuhMasterInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhMasterEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'WazuhSecurityGroup']
  WazuhMasterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'MasterEIP-${AWS::StackName}'
  WazuhMasterEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref WazuhMasterEth0
      AllocationId: !GetAtt
        - WazuhMasterEIP
        - AllocationId

  # Wazuh worker instance
  WazuhWorkerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhClusterKey: ${WazuhClusterKey}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                InstallType: ${InstallType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_worker.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/master/production/wazuh/cluster/wazuh_cf_worker.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_worker.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhWorkerEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: WazuhWorker
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WazuhWorkerInstance --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WazuhWorkerInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhWorkerEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'WazuhSecurityGroup']
  WazuhWorkerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'WorkerEIP-${AWS::StackName}'
  WazuhWorkerEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref WazuhWorkerEth0
      AllocationId: !GetAtt
        - WazuhWorkerEIP
        - AllocationId
Outputs:
  ElasticBootstrapIp:
    Description: Elastic Bootstrap IP
    Value: !GetAtt
      - ElasticBootstrap
      - PublicIp
  ElasticMasterB:
    Description: Elastic masterB IP
    Value: !GetAtt
      - ElasticMasterB
      - PublicIp
  ElasticMasterC:
    Description: Elastic masterC IP
    Value: !GetAtt
      - ElasticMasterC
      - PublicIp
  WazuhMasterInstance:
    Description: Wazuh master IP
    Value: !GetAtt
      - WazuhMasterInstance
      - PublicIp
  WazuhWorkerInstance:
    Description: Wazuh worker IP
    Value: !GetAtt
      - WazuhWorkerInstance
      - PublicIp
  KibanaInstance:
    Description: Kibana instance IP
    Value: !GetAtt
      - KibanaInstance
      - PublicIp
  ElasticBootstrapDNS:
    Description: Elastic Bootstrap DNS
    Value: !Ref ElasticBootstrapRecord
    Condition: EnableDNSRecords
  ElasticMasterBDNS:
    Description: Elastic master B DNS
    Value: !Ref ElasticMasterBRecord
    Condition: EnableDNSRecords
  ElasticMasterCDNS:
    Description: Elastic master C IP
    Value: !Ref ElasticMasterCRecord
    Condition: EnableDNSRecords
  WazuhMasterInstanceDNS:
    Description: Wazuh Master DNS
    Value: !Ref WazuhMasterInstanceRecord
    Condition: EnableDNSRecords
  WazuhWorkerInstanceDNS:
    Description: Wazuh Worker DNS
    Value: !Ref WazuhWorkerInstanceRecord
    Condition: EnableDNSRecords
  KibanaInstanceDNS:
    Description: Kibana instance DNS
    Value: !Ref KibanaInstanceRecord
    Condition: EnableDNSRecords
  LoadBalancerDNS:
    Description: Load balancer DNS
    Value: !Ref LbRecord
    Condition: EnableDNSRecords
